apiVersion: v1
kind: Template
metadata:
  name: ha-mlops-modelapi
parameters: []
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: ha-mlops-modelapi
    labels:
      app: ha-mlops
      component: modelapi
      build: ha-mlops-modelapi-build
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: ha-mlops-modelapi-build
    labels:
      app: ha-mlops
      component: modelapi
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: 'ha-mlops-modelapi:latest'
    resources:
      limits:
        memory: 4Gi
    source:
      git:
        uri: https://github.com/datanizing/datascienceday.git
        ref: "feature/mlops"
        contextDir: "08_MLOps"
    strategy:
      type: Docker
      dockerStrategy:
        env:
        - name: "MINIO_ACCESS_KEY"
          valueFrom:
            secretKeyRef:
              name: ha-mlops-minio
              key: access-key
        - name: "MINIO_SECRET_KEY"
          valueFrom:
            secretKeyRef:
              name: ha-mlops-minio
              key: secret-key
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: ha-mlops
      component: model
    annotations:
      image.openshift.io/triggers: |
        [{
          "from": {
            "kind": "ImageStreamTag",
            "name": "ha-mlops-modelapi:latest"
          },
          "fieldPath": "spec.template.spec.containers[?(@.name==\"model\")].image"
        }]
    name: model
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: ha-mlops
        component: model
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          prometheus.io/port: '8080'
          prometheus.io/scrape: 'true'
        labels:
          app: ha-mlops
          component: model
      spec:
        containers:
          - env: []
            image: model
            imagePullPolicy: IfNotPresent
            name: model
            ports:
              - containerPort: 8080
                protocol: TCP
            readinessProbe:
              failureThreshold: 15
              httpGet:
                path: /healthcheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 20
              periodSeconds: 20
              successThreshold: 1
              timeoutSeconds: 30
            resources: {}
            volumeMounts: []
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ha-mlops
      component: model
    name: model
  spec:
    type: ClusterIP
    ports:
      - name: model
        port: 8080
        protocol: TCP
        targetPort: 8080
    selector:
      app: ha-mlops
      component: model
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ha-mlops
      component: model
    name: model
  spec:
    path: /
    port:
      targetPort: model
    to:
      kind: Service
      name: model