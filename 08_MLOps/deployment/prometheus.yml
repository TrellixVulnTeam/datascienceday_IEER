apiVersion: v1
kind: Template
metadata:
  name: ha-mlops-prometheus
parameters: 
  - name: GF_SECURITY_ADMIN_PASSWORD 
    displayName: grafana admin password 
    description: grafana admin password 
    generate: expression 
    from: "[a-zA-Z0-9]{10}" 
    required: true 
message: |
  "... The grafana admin password is ${GF_SECURITY_ADMIN_PASSWORD} ..." 
objects:
  # Source: minio/templates/secrets.yaml
- apiVersion: v1
  kind: Secret
  metadata:
    name: ha-mlops-grafana
    labels:
      app: ha-mlops
      component: grafana
  type: Opaque
  stringData:
    GF_SECURITY_ADMIN_PASSWORD: "${GF_SECURITY_ADMIN_PASSWORD}"
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ha-mlops-prometheus
    labels:
      app: ha-mlops
      component: prometheus
  spec:
    accessModes:
      - "ReadWriteOnce"
    resources:
      requests:
        storage: "8Gi"
  # Source: minio/templates/service.yaml
# - apiVersion: image.openshift.io/v1
#   kind: ImageStream
#   metadata:
#     labels:
#       app: ha-mlops
#       component: grafana
#     name: ha-mlops-grafana
#   spec:
#     tags:
#       - from:
#           kind: DockerImage
#           name: docker.io/bitnami/grafana
#         name: 7.5.9-debian-10-r0
#         referencePolicy:
#           type: Source
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: performance-monitoring
      app.kubernetes.io/component: prometheus
    name: prometheus
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: prometheus
        app.kubernetes.io/component: prometheus
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          prometheus.io/path: /metrics
          prometheus.io/port: '9090'
          prometheus.io/scrape: 'true'
        labels:
          app: prometheus
          app.kubernetes.io/component: prometheus
      spec:
        containers:
          - image: docker.io/bitnami/prometheus:2.28.0-debian-10-r1
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 9090
                scheme: HTTP
              initialDelaySeconds: 40
              periodSeconds: 20
              successThreshold: 1
              timeoutSeconds: 30
            name: prometheus
            ports:
              - containerPort: 9090
                protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 9090
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 20
              successThreshold: 1
              timeoutSeconds: 30
            resources:
              requests:
                cpu: 200m
                memory: 250Mi
            volumeMounts:
              - mountPath: /opt/bitnami/prometheus/data
                name: prometheus-data
              - mountPath: /opt/bitnami/prometheus/conf
                name: prometheus-config
        volumes:
          - name: prometheus-data
            persistentVolumeClaim:
              claimName: ha-mlops-prometheus
          - configMap:
              defaultMode: 420
              name: prometheus-config
            name: prometheus-config
- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: performance-monitoring
      app.kubernetes.io/component: prometheus
    name: prometheus-config
  data:
    prometheus.yml: >-
      # A scrape configuration for running Prometheus on a Kubernetes cluster.

      # This uses separate scrape configs for cluster components (i.e. API server,
      node) and services to allow each to use different authentication configs.

      # Kubernetes labels will be added as Prometheus labels on metrics via the
      `labelmap` relabeling action.

      global:
        scrape_timeout: 20s
        scrape_interval: 20s
        evaluation_interval: 20s

      # Alert manager integration

      # rule_files:
      #   - "/etc/prometheus-rules/*.yaml"

      # alerting:
      #   alertmanagers:
      #     - static_configs:
      #       - targets:
      #         - alertmanager:9093

      # Scrape config for API servers.

      #

      # Kubernetes exposes API servers as endpoints to the default/kubernetes
      service so this uses `endpoints` role and uses relabelling to only keep

      # the endpoints associated with the default/kubernetes service using the
      default named port `https`.

      # This works for single API server deployments as well as HA API server
      deployments.

      scrape_configs:

        # The relabeling allows the actual pod scrape endpoint to be configured via the following annotations:
        #
        # * `prometheus.io/scrape`: Only scrape pods that have a value of `true`
        # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
        # * `prometheus.io/port`: Scrape the pod on the indicated port instead of the default of 9102.
        - job_name: kubernetes-pods

          kubernetes_sd_configs:
            - role: endpoints
              namespaces:
                names:
                  - ki-modelle-ewu

          relabel_configs:
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
              action: keep
              regex: true
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
              action: replace
              regex: (.+):(?:\d+);(\d+)
              replacement: ${1}:${2}
              target_label: __address__
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)
            - source_labels: [__meta_kubernetes_namespace]
              action: replace
              target_label: kubernetes_namespace
            - source_labels: [__meta_kubernetes_pod_name]
              action: replace
              target_label: kubernetes_pod_name
            #kubenetes service discovery
            - source_labels: [__meta_kubernetes_service_label_app]
              action: replace
              target_label: application
            - source_labels: [__meta_kubernetes_pod_name]
              regex: (.+)-(.+)-(.+)
              replacement: ${1}
              action: replace
              target_label: app
            - source_labels: [__meta_kubernetes_pod_controller_kind]
              action: replace            
              target_label: pod_controller_kind
            - source_labels: [__meta_kubernetes_pod_node_name]
              action: replace
              target_label: pod_node_name

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: performance-monitoring
    name: prometheus
  spec:
    type: ClusterIP
    ports:
      - name: prometheus
        port: 9090
        protocol: TCP
        targetPort: 9090
    selector:
      app: prometheus
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: performance-monitoring
      app.kubernetes.io/component: grafana
    name: grafana
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: grafana
        app.kubernetes.io/component: grafana
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          prometheus.io/port: '3000'
          prometheus.io/scrape: 'true'
        creationTimestamp: null
        labels:
          app: grafana
          app.kubernetes.io/component: grafana
      spec:
        containers:
          - env:
              - name: GF_SECURITY_ADMIN_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: GF_SECURITY_ADMIN_PASSWORD
                    name: ha-mlops-grafana
              - name: GF_SECURITY_ADMIN_USER
                value: admin
            image: docker.io/bitnami/grafana:7.5.9-debian-10-r0
            imagePullPolicy: IfNotPresent
            name: grafana
            ports:
              - containerPort: 3000
                protocol: TCP
            readinessProbe:
              failureThreshold: 15
              httpGet:
                path: /
                port: 3000
                scheme: HTTP
              initialDelaySeconds: 20
              periodSeconds: 20
              successThreshold: 1
              timeoutSeconds: 30
            resources:
              limits:
                cpu: 250m
                memory: 512Mi
              requests:
                cpu: 125m
                memory: 256Mi
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: performance-monitoring
    name: grafana
  spec:
    type: ClusterIP
    ports:
      - name: grafana
        port: 3000
        protocol: TCP
        targetPort: 3000
    selector:
      app: grafana
